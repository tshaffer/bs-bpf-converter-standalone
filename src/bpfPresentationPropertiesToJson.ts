import { isArray, isNil, isNumber, isObject, isString } from 'lodash';

import {
  HtmlSiteType,
} from '@brightsign/bscore';

import {
  fixJson,
  getParameterArray,
} from './helpers';

import {
  fixParameterValue,
  fixUserVariables,
} from './bpfToJson';

// TODO - much to be done
export function fixMetadata(rawMetadata: any) : any {

  const {
    DirectoryLocations, SerialPortConfiguration, backgroundScreenColor, beacons, htmlSites, liveDataFeeds,
    parserPlugins, presentationIdentifiers, scriptPlugins, userDefinedEvents, userVariables
  } = rawMetadata;

  /* TODO - not implemented yet
  Based on reviewing a presentation generated by BrightAuthorVersion="4.8.0.1" - non interactive - on 3/21/2018
   <usbTypeAMinVolume>0</usbTypeAMinVolume>
   <usbTypeAMaxVolume>100</usbTypeAMaxVolume>
   <usbTypeCMinVolume>0</usbTypeCMinVolume>
   <usbTypeCMaxVolume>100</usbTypeCMaxVolume>
   <usb700_1MinVolume>0</usb700_1MinVolume>
   <usb700_1MaxVolume>100</usb700_1MaxVolume>
   <usb700_2MinVolume>0</usb700_2MinVolume>
   <usb700_2MaxVolume>100</usb700_2MaxVolume>
   <usb700_3MinVolume>0</usb700_3MinVolume>
   <usb700_3MaxVolume>100</usb700_3MaxVolume>
   <usb700_4MinVolume>0</usb700_4MinVolume>
   <usb700_4MaxVolume>100</usb700_4MaxVolume>
   <usb700_5MinVolume>0</usb700_5MinVolume>
   <usb700_5MaxVolume>100</usb700_5MaxVolume>
   <usb700_6MinVolume>0</usb700_6MinVolume>
   <usb700_6MaxVolume>100</usb700_6MaxVolume>
   <usb700_7MinVolume>0</usb700_7MinVolume>
   <usb700_7MaxVolume>100</usb700_7MaxVolume>

   <userDefinedEvents>
   <presentationIdentifiers>
   <beacons>
   <DirectoryLocations>

    Mosaic mode if isMosaic === true
   <isMosaic>True</isMosaic>

still need to check the following
   metadata.backgroundScreenColor = fixBackgroundScreenColor(backgroundScreenColor);
   metadata.SerialPortConfigurations = fixSerialPortConfiguration(SerialPortConfiguration);
   metadata.liveDataFeeds = fixLiveDataFeeds(liveDataFeeds);
   metadata.userVariables = fixUserVariables(userVariables);
   metadata.htmlSites = fixHtmlSites(htmlSites);
   metadata.scriptPlugins = fixScriptPlugins(scriptPlugins);
   metadata.parserPlugins = fixParserPlugins(parserPlugins);

in addition to zones
   */

  const metadataSpec: any[] = [
    { name: 'name', type: 'string'},
    { name: 'videoMode', type: 'string'},
    { name: 'model', type: 'string'},
    { name: 'alphabetizeVariableNames', type: 'boolean'},
    { name: 'autoCreateMediaCounterVariables', type: 'boolean'},
    { name: 'delayScheduleChangeUntilMediaEndEvent', type: 'boolean'},
    { name: 'deviceWebPageDisplay', type: 'string'},
    { name: 'flipCoordinates', type: 'boolean'},
    { name: 'forceResolution', type: 'boolean'},
    { name: 'graphicsZOrder', type: 'string'},
    { name: 'htmlEnableJavascriptConsole', type: 'boolean'},
    { name: 'inactivityTime', type: 'number'},
    { name: 'inactivityTimeout', type: 'boolean'},
    { name: 'isMosaic', type: 'boolean'},
    { name: 'language', type: 'string'},
    { name: 'languageKey', type: 'string'},
    { name: 'monitorOrientation', type: 'string'},
    { name: 'monitorOverscan', type: 'string'},
    { name: 'resetVariablesOnPresentationStart', type: 'boolean'},
    { name: 'tenBitColorEnabled', type: 'boolean'},
    { name: 'dolbyVision', type: 'boolean'},
    { name: 'fullResGraphicsEnabled', type: 'boolean'},
    { name: 'audioConfiguration', type: 'string'},
    { name: 'audioAutoLevel', type: 'boolean'},
    { name: 'touchCursorDisplayMode', type: 'string'},
    { name: 'udpDestinationAddress', type: 'string'},
    { name: 'udpDestinationAddressType', type: 'string'},
    { name: 'udpDestinationPort', type: 'number'},
    { name: 'udpReceiverPort', type: 'number'},
    { name: 'videoConnector', type: 'string'},
    { name: 'BP200AConfiguration', type: 'number'},
    { name: 'BP200AConfigureAutomatically', type: 'boolean'},
    { name: 'BP200BConfiguration', type: 'number'},
    { name: 'BP200BConfigureAutomatically', type: 'boolean'},
    { name: 'BP200CConfiguration', type: 'number'},
    { name: 'BP200CConfigureAutomatically', type: 'boolean'},
    { name: 'BP200DConfiguration', type: 'number'},
    { name: 'BP200DConfigureAutomatically', type: 'boolean'},
    { name: 'BP900AConfiguration', type: 'number'},
    { name: 'BP900AConfigureAutomatically', type: 'boolean'},
    { name: 'BP900BConfiguration', type: 'number'},
    { name: 'BP900BConfigureAutomatically', type: 'boolean'},
    { name: 'BP900CConfiguration', type: 'number'},
    { name: 'BP900CConfigureAutomatically', type: 'boolean'},
    { name: 'BP900DConfiguration', type: 'number'},
    { name: 'BP900DConfigureAutomatically', type: 'boolean'},
    { name: 'audio1MaxVolume', type: 'number'},
    { name: 'audio1MinVolume', type: 'number'},
    { name: 'audio2MaxVolume', type: 'number'},
    { name: 'audio2MinVolume', type: 'number'},
    { name: 'audio3MaxVolume', type: 'number'},
    { name: 'audio3MinVolume', type: 'number'},
    { name: 'audioConfiguration', type: 'string'},
    { name: 'fullResGraphicsEnabled', type: 'boolean'},
    { name: 'gpio0', type: 'string'},
    { name: 'gpio1', type: 'string'},
    { name: 'gpio2', type: 'string'},
    { name: 'gpio3', type: 'string'},
    { name: 'gpio4', type: 'string'},
    { name: 'gpio5', type: 'string'},
    { name: 'gpio6', type: 'string'},
    { name: 'gpio7', type: 'string'},
    { name: 'hdmiMaxVolume', type: 'number'},
    { name: 'hdmiMinVolume', type: 'number'},
    { name: 'isBackup', type: 'boolean'},
    { name: 'networkedVariablesUpdateInterval', type: 'number'},
    { name: 'spdifMaxVolume', type: 'number'},
    { name: 'spdifMinVolume', type: 'number'},
    { name: 'usbAMaxVolume', type: 'number'},
    { name: 'usbAMinVolume', type: 'number'},
    { name: 'usbBMaxVolume', type: 'number'},
    { name: 'usbBMinVolume', type: 'number'},
    { name: 'usbCMaxVolume', type: 'number'},
    { name: 'usbCMinVolume', type: 'number'},
    { name: 'usbDMaxVolume', type: 'number'},
    { name: 'usbDMinVolume', type: 'number'},
  ];

  const metadata : any = fixJson(metadataSpec, rawMetadata);
  metadata.backgroundScreenColor = fixBackgroundScreenColor(backgroundScreenColor);
  metadata.SerialPortConfigurations = fixSerialPortConfiguration(SerialPortConfiguration);
  metadata.liveDataFeeds = fixLiveDataFeeds(liveDataFeeds);
  metadata.userVariables = fixUserVariables(userVariables);
  metadata.htmlSites = fixHtmlSites(htmlSites);
  metadata.scriptPlugins = fixScriptPlugins(scriptPlugins);
  metadata.parserPlugins = fixParserPlugins(parserPlugins);

  
  return metadata;
}


// LOOKS OK & TESTED
function fixLiveDataFeeds(rawLiveDataFeedSpec: any) : any {

  const liveDataFeeds: any[] = [];

  const liveDataFeedConfigurationSpec: any [] = [
    { name: 'autoGenerateUserVariables', type: 'boolean'},
    { name: 'dataFeedUse', type: 'string'},
    { name: 'name', type: 'string'},
    { name: 'updateInterval', type: 'number'},
    { name: 'useHeadRequest', type: 'boolean'},
    { name: 'parserPluginName', type: 'string'},
    { name: 'userVariableAccess', type: 'string'},
    { name: 'uvParserPluginName', type: 'string'}
  ];

  if (rawLiveDataFeedSpec && rawLiveDataFeedSpec.liveDataFeed) {
    const rawLiveDataFeeds = getParameterArray(rawLiveDataFeedSpec.liveDataFeed);
    rawLiveDataFeeds.forEach((rawLiveDataFeed: any) => {

      const liveDataFeed: any = fixJson(liveDataFeedConfigurationSpec, rawLiveDataFeed);

      if (!isNil(rawLiveDataFeed.liveDynamicPlaylist)) {
        liveDataFeed.liveDynamicPlaylist = fixLiveDynamicPlaylist(rawLiveDataFeed.liveDynamicPlaylist);
      }
      else if (!isNil(rawLiveDataFeed.liveBSNTaggedPlaylist)) {
        liveDataFeed.liveBSNTaggedPlaylist = fixLiveTaggedPlaylist(rawLiveDataFeed.liveBSNTaggedPlaylist);
      }
      else if (!isNil(rawLiveDataFeed.liveBSNDataFeed)) {
        liveDataFeed.liveBSNDataFeed = fixLiveDataFeed(rawLiveDataFeed.liveBSNDataFeed);
      }
      else if (!isNil(rawLiveDataFeed.liveBSNMediaFeed)) {
        liveDataFeed.liveMediaFeed = fixLiveMediaFeed(rawLiveDataFeed.liveBSNMediaFeed);
      }
      else {
        liveDataFeed.url = fixParameterValue(rawLiveDataFeed.url.parameterValue);
      }
      liveDataFeeds.push(liveDataFeed);
    });
  }

  return liveDataFeeds;
}

// TODO - pending node support
function fixHtmlSites(rawHtmlSiteSpecs : any) : any {

  // localHTMLSite
  //    name - string
  //    queryString - parameterValue
  //    filePath - string
  // remoteHTMLSite
  //    name - string
  //    queryString - parameterValue
  //    url - parameterValue
  //  brightPlateHTMLSite
  //    name - string
  //    queryString - parameterValue
  //    brightPlateName - string
  //    displayName - string

  const htmlSites : any[] = [];

  const localHtmlSitesSpec: any [] = [
    { name: 'name', type: 'string'},
    { name: 'filePath', type: 'string'}
  ];

  if (rawHtmlSiteSpecs && rawHtmlSiteSpecs.localHTMLSite) {
    const rawLocalHtmlSites = getParameterArray(rawHtmlSiteSpecs.localHTMLSite);
    rawLocalHtmlSites.forEach((rawLocalHtmlSite) => {
      const localHtmlSite : any = fixJson(localHtmlSitesSpec, rawLocalHtmlSite);
      localHtmlSite.queryString = fixParameterValue(rawLocalHtmlSite.queryString.parameterValue);
      localHtmlSite.type = HtmlSiteType.Hosted;
      htmlSites.push(localHtmlSite);
    });
  }

  const remoteHtmlSitesSpec: any [] = [
    { name: 'name', type: 'string'},
  ];

  if (rawHtmlSiteSpecs && rawHtmlSiteSpecs.remoteHTMLSite) {
    const rawRemoteHtmlSites = getParameterArray(rawHtmlSiteSpecs.remoteHTMLSite);
    rawRemoteHtmlSites.forEach((rawRemoteHtmlSite) => {
      const remoteHtmlSite : any = fixJson(remoteHtmlSitesSpec, rawRemoteHtmlSite);
      remoteHtmlSite.url = fixParameterValue(rawRemoteHtmlSite.url.parameterValue);
      remoteHtmlSite.queryString = fixParameterValue(rawRemoteHtmlSite.queryString.parameterValue);
      remoteHtmlSite.type = HtmlSiteType.Remote;
      htmlSites.push(remoteHtmlSite);
    });
  }

  // TODO until we decide what to do with BrightPlates
  if (rawHtmlSiteSpecs && rawHtmlSiteSpecs.brightPlateHTMLSite) {
    debugger;
  }
  // const brightPlateHtmlSitesSpec: any [] = [
  //   { name: 'name', type: 'string'},
  //   { name: 'brightPlateName', type: 'string'},
  //   { name: 'displayName', type: 'string'},
  // ];
  //
  // if (rawHtmlSiteSpecs && rawHtmlSiteSpecs.brightPlateHTMLSite) {
  //   const rawBrightPlateHtmlSites = getParameterArray(rawHtmlSiteSpecs.brightPlateHTMLSite);
  //   rawBrightPlateHtmlSites.forEach((rawBrightPlateHtmlSite) => {
  //     const brightPlateHtmlSite : any = fixJson(brightPlateHtmlSitesSpec, rawBrightPlateHtmlSite);
  //     brightPlateHtmlSite.queryString = '';    // TODO
  //     brightPlateHtmlSite.type = 'brightPlate'; // TODO - enum
  //     htmlSites.push(brightPlateHtmlSite);
  //   });
  // }

  return htmlSites;
}

// LOOKS OK
function fixScriptPlugins(rawScriptPluginSpecs : any) : any {

  const scriptPlugins : any[] = [];

  const scriptPluginsSpec: any [] = [
    { name: 'name', type: 'string'},
    { name: 'path', type: 'string'},
  ];

  if (rawScriptPluginSpecs && rawScriptPluginSpecs.scriptPlugin) {
    const rawScriptPlugins = getParameterArray(rawScriptPluginSpecs.scriptPlugin);
    rawScriptPlugins.forEach((rawScriptPlugin) => {
      const scriptPlugin : any = fixJson(scriptPluginsSpec, rawScriptPlugin);
      scriptPlugins.push(scriptPlugin);
    });
  }

  return scriptPlugins;
}

// LOOKS OK
function fixParserPlugins(rawParserPluginSpecs : any) : any {

  const parserPlugins : any[] = [];

  const parserPluginsSpec: any [] = [
    { name: 'name', type: 'string'},
    { name: 'path', type: 'string'},
    { name: 'parseFeedFunctionName', type: 'string'},
    { name: 'parseUVFunctionName', type: 'string'},
    { name: 'userAgentFunctionName', type: 'string'},
  ];

  if (rawParserPluginSpecs && rawParserPluginSpecs.parserPlugin) {
    const rawParserPlugins = getParameterArray(rawParserPluginSpecs.parserPlugin);
    rawParserPlugins.forEach((rawParserPlugin) => {
      const parserPlugin : any = fixJson(parserPluginsSpec, rawParserPlugin);
      parserPlugins.push(parserPlugin);
    });
  }

  return parserPlugins;
}

// LOOKS OK
// TODO - supportsAudio required?
function fixLiveDynamicPlaylist(rawLiveDynamicPlaylist : any) : any {

  const liveDynamicPlaylistSpec : any [] = [
    { name: 'id', type: 'string'},
    { name: 'name', type: 'string'},
    { name: 'supportsAudio', type: 'boolean'},
    { name: 'url', type: 'string'},
  ];

  const liveDynamicPlaylist : any = fixJson(liveDynamicPlaylistSpec, rawLiveDynamicPlaylist);
  return liveDynamicPlaylist;
}

// LOOKS OK
function fixLiveTaggedPlaylist(rawLiveTaggedPlaylist : any) : any {

  const liveTaggedPlaylistSpec : any [] = [
    { name: 'id', type: 'string'},
    { name: 'name', type: 'string'},
    { name: 'tagMatching', type: 'boolean'},
    { name: 'url', type: 'string'},
  ];

  const liveTaggedPlaylist : any = fixJson(liveTaggedPlaylistSpec, rawLiveTaggedPlaylist);
  return liveTaggedPlaylist;
}

// LOOKS OK
function fixLiveDataFeed(rawLiveDataFeed : any) : any {

  const liveDataFeedSpec : any [] = [
    { name: 'id', type: 'string'},
    { name: 'name', type: 'string'},
    { name: 'url', type: 'string'},
  ];

  const liveDataFeed : any = fixJson(liveDataFeedSpec, rawLiveDataFeed);
  return liveDataFeed;
}

// LOOKS OK
function fixLiveMediaFeed(rawLiveMediaFeed : any) : any {

  const liveMediaFeedSpec : any [] = [
    { name: 'id', type: 'string'},
    { name: 'name', type: 'string'},
    { name: 'url', type: 'string'},
  ];

  const liveMediaFeed : any = fixJson(liveMediaFeedSpec, rawLiveMediaFeed);
  return liveMediaFeed;
}

// LOOKS OK
// TODO - check types
function fixSerialPortConfiguration(rawSerialPortConfigurations : any) : any {

  const serialPortConfigurations : any[] = [];

  const serialPortConfigurationSpec: any [] = [
    { name: 'baudRate', type: 'number'},
    { name: 'connectedDevice', type: 'string'},
    { name: 'dataBits', type: 'number'},
    { name: 'invertSignals', type: 'boolean'},
    { name: 'parity', type: 'string'},
    { name: 'port', type: 'number'},
    { name: 'protocol', type: 'string'},
    { name: 'receiveEol', type: 'string'},
    { name: 'sendEol', type: 'string'},
    { name: 'stopBits', type: 'number'},
  ];

  rawSerialPortConfigurations.forEach( (rawSerialPortConfiguration : any) => {
    serialPortConfigurations.push(fixJson(serialPortConfigurationSpec, rawSerialPortConfiguration));
  });

  return serialPortConfigurations;
}

// LOOKS OK
export function fixBackgroundScreenColor(rawBackgroundScreenColor : any) : any {
  const backgroundScreenColorSpec: any[] = [
    { name: 'a', type: 'number'},
    { name: 'r', type: 'number'},
    { name: 'g', type: 'number'},
    { name: 'b', type: 'number'},
  ];

  return fixJson(backgroundScreenColorSpec, rawBackgroundScreenColor.$);
}

